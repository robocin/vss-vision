// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_BallModelChipFixedLoss;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_BallModelStraightTwoPhase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_GeometryCameraCalibration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2f;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SSL_FieldCircularArc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SSL_FieldLineSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryFieldSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryModels;
}  // namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto
class Vector2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector2f>
      _instance;
} _Vector2f_default_instance_;
class SSL_FieldLineSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldLineSegment>
      _instance;
} _SSL_FieldLineSegment_default_instance_;
class SSL_FieldCircularArcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_FieldCircularArc>
      _instance;
} _SSL_FieldCircularArc_default_instance_;
class SSL_GeometryFieldSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize>
      _instance;
} _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryCameraCalibrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryCameraCalibration>
      _instance;
} _SSL_GeometryCameraCalibration_default_instance_;
class SSL_BallModelStraightTwoPhaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_BallModelStraightTwoPhase>
      _instance;
} _SSL_BallModelStraightTwoPhase_default_instance_;
class SSL_BallModelChipFixedLossDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_BallModelChipFixedLoss>
      _instance;
} _SSL_BallModelChipFixedLoss_default_instance_;
class SSL_GeometryModelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryModels>
      _instance;
} _SSL_GeometryModels_default_instance_;
class SSL_GeometryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData>
      _instance;
} _SSL_GeometryData_default_instance_;
namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto {
static void InitDefaultsVector2f() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vector2f_default_instance_;
    new (ptr) ::Vector2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vector2f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vector2f =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVector2f}, {}};

static void InitDefaultsSSL_FieldLineSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_FieldLineSegment_default_instance_;
    new (ptr) ::SSL_FieldLineSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_FieldLineSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SSL_FieldLineSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSSL_FieldLineSegment}, {
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_Vector2f.base,}};

static void InitDefaultsSSL_FieldCircularArc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_FieldCircularArc_default_instance_;
    new (ptr) ::SSL_FieldCircularArc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_FieldCircularArc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SSL_FieldCircularArc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSSL_FieldCircularArc}, {
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_Vector2f.base,}};

static void InitDefaultsSSL_GeometryFieldSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_GeometryFieldSize_default_instance_;
    new (ptr) ::SSL_GeometryFieldSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_GeometryFieldSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryFieldSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_GeometryFieldSize}, {
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldLineSegment.base,
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldCircularArc.base,}};

static void InitDefaultsSSL_GeometryCameraCalibration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_GeometryCameraCalibration_default_instance_;
    new (ptr) ::SSL_GeometryCameraCalibration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_GeometryCameraCalibration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_GeometryCameraCalibration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_GeometryCameraCalibration}, {}};

static void InitDefaultsSSL_BallModelStraightTwoPhase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_BallModelStraightTwoPhase_default_instance_;
    new (ptr) ::SSL_BallModelStraightTwoPhase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_BallModelStraightTwoPhase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_BallModelStraightTwoPhase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_BallModelStraightTwoPhase}, {}};

static void InitDefaultsSSL_BallModelChipFixedLoss() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_BallModelChipFixedLoss_default_instance_;
    new (ptr) ::SSL_BallModelChipFixedLoss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_BallModelChipFixedLoss::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_BallModelChipFixedLoss =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_BallModelChipFixedLoss}, {}};

static void InitDefaultsSSL_GeometryModels() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_GeometryModels_default_instance_;
    new (ptr) ::SSL_GeometryModels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_GeometryModels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryModels =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_GeometryModels}, {
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelStraightTwoPhase.base,
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelChipFixedLoss.base,}};

static void InitDefaultsSSL_GeometryData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_GeometryData_default_instance_;
    new (ptr) ::SSL_GeometryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_GeometryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SSL_GeometryData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSSL_GeometryData}, {
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryFieldSize.base,
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryCameraCalibration.base,
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryModels.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vector2f.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_FieldLineSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_FieldCircularArc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryFieldSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryCameraCalibration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_BallModelStraightTwoPhase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_BallModelChipFixedLoss.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryModels.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryData.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vector2f, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vector2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vector2f, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, p1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, p2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldLineSegment, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_FieldCircularArc, type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, field_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, field_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, goal_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, goal_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, boundary_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, field_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, field_arcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, penalty_area_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, penalty_area_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, center_circle_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, line_thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, goal_center_to_penalty_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, goal_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, ball_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryFieldSize, max_robot_radius_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, focal_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, principal_point_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, principal_point_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, q0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, q1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, q2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, q3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, derived_camera_world_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, derived_camera_world_ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, derived_camera_world_tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, pixel_image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryCameraCalibration, pixel_image_height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, acc_slide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, acc_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, k_switch_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, damping_xy_first_hop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, damping_xy_other_hops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, damping_z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryModels, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryModels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryModels, straight_two_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryModels, chip_fixed_loss_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryData, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryData, calib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_GeometryData, models_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Vector2f)},
  { 9, 19, sizeof(::SSL_FieldLineSegment)},
  { 24, 36, sizeof(::SSL_FieldCircularArc)},
  { 43, 63, sizeof(::SSL_GeometryFieldSize)},
  { 78, 100, sizeof(::SSL_GeometryCameraCalibration)},
  { 117, 125, sizeof(::SSL_BallModelStraightTwoPhase)},
  { 128, 136, sizeof(::SSL_BallModelChipFixedLoss)},
  { 139, 146, sizeof(::SSL_GeometryModels)},
  { 148, 156, sizeof(::SSL_GeometryData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Vector2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_FieldLineSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_FieldCircularArc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_GeometryFieldSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_GeometryCameraCalibration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_BallModelStraightTwoPhase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_BallModelChipFixedLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_GeometryModels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_GeometryData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages_robocup_ssl_geometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#messages_robocup_ssl_geometry.proto\" \n"
      "\010Vector2f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\210\001\n\024SSL_"
      "FieldLineSegment\022\014\n\004name\030\001 \002(\t\022\025\n\002p1\030\002 \002"
      "(\0132\t.Vector2f\022\025\n\002p2\030\003 \002(\0132\t.Vector2f\022\021\n\t"
      "thickness\030\004 \002(\002\022!\n\004type\030\005 \001(\0162\023.SSL_Fiel"
      "dShapeType\"\235\001\n\024SSL_FieldCircularArc\022\014\n\004n"
      "ame\030\001 \002(\t\022\031\n\006center\030\002 \002(\0132\t.Vector2f\022\016\n\006"
      "radius\030\003 \002(\002\022\n\n\002a1\030\004 \002(\002\022\n\n\002a2\030\005 \002(\002\022\021\n\t"
      "thickness\030\006 \002(\002\022!\n\004type\030\007 \001(\0162\023.SSL_Fiel"
      "dShapeType\"\260\003\n\025SSL_GeometryFieldSize\022\024\n\014"
      "field_length\030\001 \002(\005\022\023\n\013field_width\030\002 \002(\005\022"
      "\022\n\ngoal_width\030\003 \002(\005\022\022\n\ngoal_depth\030\004 \002(\005\022"
      "\026\n\016boundary_width\030\005 \002(\005\022*\n\013field_lines\030\006"
      " \003(\0132\025.SSL_FieldLineSegment\022)\n\nfield_arc"
      "s\030\007 \003(\0132\025.SSL_FieldCircularArc\022\032\n\022penalt"
      "y_area_depth\030\010 \001(\005\022\032\n\022penalty_area_width"
      "\030\t \001(\005\022\034\n\024center_circle_radius\030\n \001(\005\022\026\n\016"
      "line_thickness\030\013 \001(\005\022#\n\033goal_center_to_p"
      "enalty_mark\030\014 \001(\005\022\023\n\013goal_height\030\r \001(\005\022\023"
      "\n\013ball_radius\030\016 \001(\002\022\030\n\020max_robot_radius\030"
      "\017 \001(\002\"\200\003\n\035SSL_GeometryCameraCalibration\022"
      "\021\n\tcamera_id\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002"
      "\022\031\n\021principal_point_x\030\003 \002(\002\022\031\n\021principal"
      "_point_y\030\004 \002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0"
      "\030\006 \002(\002\022\n\n\002q1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002"
      "(\002\022\n\n\002tx\030\n \002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037"
      "\n\027derived_camera_world_tx\030\r \001(\002\022\037\n\027deriv"
      "ed_camera_world_ty\030\016 \001(\002\022\037\n\027derived_came"
      "ra_world_tz\030\017 \001(\002\022\031\n\021pixel_image_width\030\020"
      " \001(\r\022\032\n\022pixel_image_height\030\021 \001(\r\"V\n\035SSL_"
      "BallModelStraightTwoPhase\022\021\n\tacc_slide\030\001"
      " \002(\001\022\020\n\010acc_roll\030\002 \002(\001\022\020\n\010k_switch\030\003 \002(\001"
      "\"l\n\032SSL_BallModelChipFixedLoss\022\034\n\024dampin"
      "g_xy_first_hop\030\001 \002(\001\022\035\n\025damping_xy_other"
      "_hops\030\002 \002(\001\022\021\n\tdamping_z\030\003 \002(\001\"\206\001\n\022SSL_G"
      "eometryModels\022:\n\022straight_two_phase\030\001 \001("
      "\0132\036.SSL_BallModelStraightTwoPhase\0224\n\017chi"
      "p_fixed_loss\030\002 \001(\0132\033.SSL_BallModelChipFi"
      "xedLoss\"\215\001\n\020SSL_GeometryData\022%\n\005field\030\001 "
      "\002(\0132\026.SSL_GeometryFieldSize\022-\n\005calib\030\002 \003"
      "(\0132\036.SSL_GeometryCameraCalibration\022#\n\006mo"
      "dels\030\003 \001(\0132\023.SSL_GeometryModels*\333\002\n\022SSL_"
      "FieldShapeType\022\r\n\tUndefined\020\000\022\020\n\014CenterC"
      "ircle\020\001\022\020\n\014TopTouchLine\020\002\022\023\n\017BottomTouch"
      "Line\020\003\022\020\n\014LeftGoalLine\020\004\022\021\n\rRightGoalLin"
      "e\020\005\022\017\n\013HalfwayLine\020\006\022\016\n\nCenterLine\020\007\022\026\n\022"
      "LeftPenaltyStretch\020\010\022\027\n\023RightPenaltyStre"
      "tch\020\t\022\037\n\033LeftFieldLeftPenaltyStretch\020\n\022 "
      "\n\034LeftFieldRightPenaltyStretch\020\013\022 \n\034Righ"
      "tFieldLeftPenaltyStretch\020\014\022!\n\035RightField"
      "RightPenaltyStretch\020\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2021);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto
const ::google::protobuf::EnumDescriptor* SSL_FieldShapeType_descriptor() {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_enum_descriptors[0];
}
bool SSL_FieldShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_Vector2f.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2f& Vector2f::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_Vector2f.base);
  return *internal_default_instance();
}


void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector2f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
  return target;
}

size_t Vector2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector2f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_FieldLineSegment::InitAsDefaultInstance() {
  ::_SSL_FieldLineSegment_default_instance_._instance.get_mutable()->p1_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
  ::_SSL_FieldLineSegment_default_instance_._instance.get_mutable()->p2_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldLineSegment::kNameFieldNumber;
const int SSL_FieldLineSegment::kP1FieldNumber;
const int SSL_FieldLineSegment::kP2FieldNumber;
const int SSL_FieldLineSegment::kThicknessFieldNumber;
const int SSL_FieldLineSegment::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldLineSegment::SSL_FieldLineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldLineSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldLineSegment)
}
SSL_FieldLineSegment::SSL_FieldLineSegment(const SSL_FieldLineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_p1()) {
    p1_ = new ::Vector2f(*from.p1_);
  } else {
    p1_ = NULL;
  }
  if (from.has_p2()) {
    p2_ = new ::Vector2f(*from.p2_);
  } else {
    p2_ = NULL;
  }
  ::memcpy(&thickness_, &from.thickness_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&thickness_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}

void SSL_FieldLineSegment::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&p1_)) + sizeof(type_));
}

SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  SharedDtor();
}

void SSL_FieldLineSegment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete p1_;
  if (this != internal_default_instance()) delete p2_;
}

void SSL_FieldLineSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_FieldLineSegment::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_FieldLineSegment& SSL_FieldLineSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldLineSegment.base);
  return *internal_default_instance();
}


void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p1_ != NULL);
      p1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(p2_ != NULL);
      p2_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&thickness_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_FieldLineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldLineSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_FieldLineSegment.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f p1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f p2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_FieldShapeType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_FieldShapeType_IsValid(value)) {
            set_type(static_cast< ::SSL_FieldShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldLineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldLineSegment)
  return false;
#undef DO_
}

void SSL_FieldLineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldLineSegment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Vector2f p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_p1(), output);
  }

  // required .Vector2f p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_p2(), output);
  }

  // required float thickness = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thickness(), output);
  }

  // optional .SSL_FieldShapeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_FieldLineSegment)
}

::google::protobuf::uint8* SSL_FieldLineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldLineSegment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Vector2f p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_p1(), deterministic, target);
  }

  // required .Vector2f p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_p2(), deterministic, target);
  }

  // required float thickness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thickness(), target);
  }

  // optional .SSL_FieldShapeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
  return target;
}

size_t SSL_FieldLineSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_p1()) {
    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  if (has_p2()) {
    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p2_);
  }

  if (has_thickness()) {
    // required float thickness = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p1_);

    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p2_);

    // required float thickness = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .SSL_FieldShapeType type = 5;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_FieldLineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldLineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldLineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldLineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldLineSegment)
    MergeFrom(*source);
  }
}

void SSL_FieldLineSegment::MergeFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_p1()->::Vector2f::MergeFrom(from.p1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_p2()->::Vector2f::MergeFrom(from.p2());
    }
    if (cached_has_bits & 0x00000008u) {
      thickness_ = from.thickness_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_FieldLineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldLineSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_p1()) {
    if (!this->p1_->IsInitialized()) return false;
  }
  if (has_p2()) {
    if (!this->p2_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldLineSegment::Swap(SSL_FieldLineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
  swap(thickness_, other->thickness_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_FieldLineSegment::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_FieldCircularArc::InitAsDefaultInstance() {
  ::_SSL_FieldCircularArc_default_instance_._instance.get_mutable()->center_ = const_cast< ::Vector2f*>(
      ::Vector2f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_FieldCircularArc::kNameFieldNumber;
const int SSL_FieldCircularArc::kCenterFieldNumber;
const int SSL_FieldCircularArc::kRadiusFieldNumber;
const int SSL_FieldCircularArc::kA1FieldNumber;
const int SSL_FieldCircularArc::kA2FieldNumber;
const int SSL_FieldCircularArc::kThicknessFieldNumber;
const int SSL_FieldCircularArc::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_FieldCircularArc::SSL_FieldCircularArc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldCircularArc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_FieldCircularArc)
}
SSL_FieldCircularArc::SSL_FieldCircularArc(const SSL_FieldCircularArc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_center()) {
    center_ = new ::Vector2f(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldCircularArc)
}

void SSL_FieldCircularArc::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&center_)) + sizeof(type_));
}

SSL_FieldCircularArc::~SSL_FieldCircularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCircularArc)
  SharedDtor();
}

void SSL_FieldCircularArc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void SSL_FieldCircularArc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_FieldCircularArc::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_FieldCircularArc& SSL_FieldCircularArc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_FieldCircularArc.base);
  return *internal_default_instance();
}


void SSL_FieldCircularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_FieldCircularArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_FieldCircularArc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_FieldCircularArc.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Vector2f center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_FieldShapeType type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_FieldShapeType_IsValid(value)) {
            set_type(static_cast< ::SSL_FieldShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_FieldCircularArc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_FieldCircularArc)
  return false;
#undef DO_
}

void SSL_FieldCircularArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldCircularArc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_center(), output);
  }

  // required float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // required float a1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a1(), output);
  }

  // required float a2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a2(), output);
  }

  // required float thickness = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thickness(), output);
  }

  // optional .SSL_FieldShapeType type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_FieldCircularArc)
}

::google::protobuf::uint8* SSL_FieldCircularArc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_FieldCircularArc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_center(), deterministic, target);
  }

  // required float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // required float a1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a1(), target);
  }

  // required float a2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a2(), target);
  }

  // required float thickness = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thickness(), target);
  }

  // optional .SSL_FieldShapeType type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCircularArc)
  return target;
}

size_t SSL_FieldCircularArc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldCircularArc)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_center()) {
    // required .Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (has_radius()) {
    // required float radius = 3;
    total_size += 1 + 4;
  }

  if (has_a1()) {
    // required float a1 = 4;
    total_size += 1 + 4;
  }

  if (has_a2()) {
    // required float a2 = 5;
    total_size += 1 + 4;
  }

  if (has_thickness()) {
    // required float thickness = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldCircularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldCircularArc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);

    // required float radius = 3;
    total_size += 1 + 4;

    // required float a1 = 4;
    total_size += 1 + 4;

    // required float a2 = 5;
    total_size += 1 + 4;

    // required float thickness = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .SSL_FieldShapeType type = 7;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_FieldCircularArc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_FieldCircularArc)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_FieldCircularArc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_FieldCircularArc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_FieldCircularArc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_FieldCircularArc)
    MergeFrom(*source);
  }
}

void SSL_FieldCircularArc::MergeFrom(const SSL_FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCircularArc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_center()->::Vector2f::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000010u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000020u) {
      thickness_ = from.thickness_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_FieldCircularArc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_FieldCircularArc::CopyFrom(const SSL_FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldCircularArc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldCircularArc::Swap(SSL_FieldCircularArc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_FieldCircularArc::InternalSwap(SSL_FieldCircularArc* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(thickness_, other->thickness_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_FieldCircularArc::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryFieldSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLinesFieldNumber;
const int SSL_GeometryFieldSize::kFieldArcsFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyAreaDepthFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyAreaWidthFieldNumber;
const int SSL_GeometryFieldSize::kCenterCircleRadiusFieldNumber;
const int SSL_GeometryFieldSize::kLineThicknessFieldNumber;
const int SSL_GeometryFieldSize::kGoalCenterToPenaltyMarkFieldNumber;
const int SSL_GeometryFieldSize::kGoalHeightFieldNumber;
const int SSL_GeometryFieldSize::kBallRadiusFieldNumber;
const int SSL_GeometryFieldSize::kMaxRobotRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryFieldSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      field_lines_(from.field_lines_),
      field_arcs_(from.field_arcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_length_, &from.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_robot_radius_) -
    reinterpret_cast<char*>(&field_length_)) + sizeof(max_robot_radius_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  ::memset(&field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_robot_radius_) -
      reinterpret_cast<char*>(&field_length_)) + sizeof(max_robot_radius_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryFieldSize.base);
  return *internal_default_instance();
}


void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_lines_.Clear();
  field_arcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&field_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&center_circle_radius_) -
        reinterpret_cast<char*>(&field_length_)) + sizeof(center_circle_radius_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&line_thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_robot_radius_) -
        reinterpret_cast<char*>(&line_thickness_)) + sizeof(max_robot_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 field_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_field_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_goal_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_goal_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_boundary_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_FieldLineSegment field_lines = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_FieldCircularArc field_arcs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_arcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 penalty_area_depth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_penalty_area_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_area_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 penalty_area_width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_penalty_area_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_area_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 center_circle_radius = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_center_circle_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_circle_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 line_thickness = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_line_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goal_center_to_penalty_mark = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_goal_center_to_penalty_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_center_to_penalty_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goal_height = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_goal_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ball_radius = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_ball_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_robot_radius = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_max_robot_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_robot_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryFieldSize)
  return false;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_length(), output);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_width(), output);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_width(), output);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goal_depth(), output);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boundary_width(), output);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->field_lines(static_cast<int>(i)),
      output);
  }

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_arcs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->field_arcs(static_cast<int>(i)),
      output);
  }

  // optional int32 penalty_area_depth = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->penalty_area_depth(), output);
  }

  // optional int32 penalty_area_width = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->penalty_area_width(), output);
  }

  // optional int32 center_circle_radius = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->center_circle_radius(), output);
  }

  // optional int32 line_thickness = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->line_thickness(), output);
  }

  // optional int32 goal_center_to_penalty_mark = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->goal_center_to_penalty_mark(), output);
  }

  // optional int32 goal_height = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->goal_height(), output);
  }

  // optional float ball_radius = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->ball_radius(), output);
  }

  // optional float max_robot_radius = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->max_robot_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_length(), target);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_width(), target);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_width(), target);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goal_depth(), target);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boundary_width(), target);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->field_lines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_arcs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->field_arcs(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 penalty_area_depth = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->penalty_area_depth(), target);
  }

  // optional int32 penalty_area_width = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->penalty_area_width(), target);
  }

  // optional int32 center_circle_radius = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->center_circle_radius(), target);
  }

  // optional int32 line_thickness = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->line_thickness(), target);
  }

  // optional int32 goal_center_to_penalty_mark = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->goal_center_to_penalty_mark(), target);
  }

  // optional int32 goal_height = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->goal_height(), target);
  }

  // optional float ball_radius = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->ball_radius(), target);
  }

  // optional float max_robot_radius = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->max_robot_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (has_field_length()) {
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .SSL_FieldLineSegment field_lines = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->field_lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_lines(static_cast<int>(i)));
    }
  }

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->field_arcs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_arcs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 penalty_area_depth = 8;
    if (has_penalty_area_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_area_depth());
    }

    // optional int32 penalty_area_width = 9;
    if (has_penalty_area_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_area_width());
    }

    // optional int32 center_circle_radius = 10;
    if (has_center_circle_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_circle_radius());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 line_thickness = 11;
    if (has_line_thickness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_thickness());
    }

    // optional int32 goal_center_to_penalty_mark = 12;
    if (has_goal_center_to_penalty_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_center_to_penalty_mark());
    }

    // optional int32 goal_height = 13;
    if (has_goal_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_height());
    }

    // optional float ball_radius = 14;
    if (has_ball_radius()) {
      total_size += 1 + 4;
    }

    // optional float max_robot_radius = 15;
    if (has_max_robot_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryFieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_lines_.MergeFrom(from.field_lines_);
  field_arcs_.MergeFrom(from.field_arcs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      field_length_ = from.field_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      penalty_area_depth_ = from.penalty_area_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      penalty_area_width_ = from.penalty_area_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      center_circle_radius_ = from.center_circle_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      line_thickness_ = from.line_thickness_;
    }
    if (cached_has_bits & 0x00000200u) {
      goal_center_to_penalty_mark_ = from.goal_center_to_penalty_mark_;
    }
    if (cached_has_bits & 0x00000400u) {
      goal_height_ = from.goal_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      ball_radius_ = from.ball_radius_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_robot_radius_ = from.max_robot_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_arcs())) return false;
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  CastToBase(&field_lines_)->InternalSwap(CastToBase(&other->field_lines_));
  CastToBase(&field_arcs_)->InternalSwap(CastToBase(&other->field_arcs_));
  swap(field_length_, other->field_length_);
  swap(field_width_, other->field_width_);
  swap(goal_width_, other->goal_width_);
  swap(goal_depth_, other->goal_depth_);
  swap(boundary_width_, other->boundary_width_);
  swap(penalty_area_depth_, other->penalty_area_depth_);
  swap(penalty_area_width_, other->penalty_area_width_);
  swap(center_circle_radius_, other->center_circle_radius_);
  swap(line_thickness_, other->line_thickness_);
  swap(goal_center_to_penalty_mark_, other->goal_center_to_penalty_mark_);
  swap(goal_height_, other->goal_height_);
  swap(ball_radius_, other->ball_radius_);
  swap(max_robot_radius_, other->max_robot_radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryCameraCalibration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryCameraCalibration::kCameraIdFieldNumber;
const int SSL_GeometryCameraCalibration::kFocalLengthFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointXFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointYFieldNumber;
const int SSL_GeometryCameraCalibration::kDistortionFieldNumber;
const int SSL_GeometryCameraCalibration::kQ0FieldNumber;
const int SSL_GeometryCameraCalibration::kQ1FieldNumber;
const int SSL_GeometryCameraCalibration::kQ2FieldNumber;
const int SSL_GeometryCameraCalibration::kQ3FieldNumber;
const int SSL_GeometryCameraCalibration::kTxFieldNumber;
const int SSL_GeometryCameraCalibration::kTyFieldNumber;
const int SSL_GeometryCameraCalibration::kTzFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTzFieldNumber;
const int SSL_GeometryCameraCalibration::kPixelImageWidthFieldNumber;
const int SSL_GeometryCameraCalibration::kPixelImageHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryCameraCalibration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_image_height_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(pixel_image_height_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

void SSL_GeometryCameraCalibration::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_image_height_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(pixel_image_height_));
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  SharedDtor();
}

void SSL_GeometryCameraCalibration::SharedDtor() {
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryCameraCalibration& SSL_GeometryCameraCalibration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryCameraCalibration.base);
  return *internal_default_instance();
}


void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&camera_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&q2_) -
        reinterpret_cast<char*>(&camera_id_)) + sizeof(q2_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&q3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_image_width_) -
        reinterpret_cast<char*>(&q3_)) + sizeof(pixel_image_width_));
  }
  pixel_image_height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryCameraCalibration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float focal_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_focal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_principal_point_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_principal_point_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distortion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_distortion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_q0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_q1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_q2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_q3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tz = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tx = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_derived_camera_world_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_ty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_derived_camera_world_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tz = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_derived_camera_world_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pixel_image_width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_pixel_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pixel_image_height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_pixel_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryCameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryCameraCalibration)
  return false;
#undef DO_
}

void SSL_GeometryCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // required float focal_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }

  // required float principal_point_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }

  // required float principal_point_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }

  // required float distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }

  // required float q0 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }

  // required float q1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }

  // required float q2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }

  // required float q3 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }

  // required float tx = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }

  // required float ty = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }

  // required float tz = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }

  // optional float derived_camera_world_tx = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }

  // optional float derived_camera_world_ty = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }

  // optional float derived_camera_world_tz = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }

  // optional uint32 pixel_image_width = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pixel_image_width(), output);
  }

  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pixel_image_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryCameraCalibration)
}

::google::protobuf::uint8* SSL_GeometryCameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // required float focal_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }

  // required float principal_point_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }

  // required float principal_point_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }

  // required float distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }

  // required float q0 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }

  // required float q1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }

  // required float q2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }

  // required float q3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }

  // required float tx = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }

  // required float ty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }

  // required float tz = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }

  // optional uint32 pixel_image_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pixel_image_width(), target);
  }

  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pixel_image_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (has_camera_id()) {
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  if (has_focal_length()) {
    // required float focal_length = 2;
    total_size += 1 + 4;
  }

  if (has_principal_point_x()) {
    // required float principal_point_x = 3;
    total_size += 1 + 4;
  }

  if (has_principal_point_y()) {
    // required float principal_point_y = 4;
    total_size += 1 + 4;
  }

  if (has_distortion()) {
    // required float distortion = 5;
    total_size += 1 + 4;
  }

  if (has_q0()) {
    // required float q0 = 6;
    total_size += 1 + 4;
  }

  if (has_q1()) {
    // required float q1 = 7;
    total_size += 1 + 4;
  }

  if (has_q2()) {
    // required float q2 = 8;
    total_size += 1 + 4;
  }

  if (has_q3()) {
    // required float q3 = 9;
    total_size += 1 + 4;
  }

  if (has_tx()) {
    // required float tx = 10;
    total_size += 1 + 4;
  }

  if (has_ty()) {
    // required float ty = 11;
    total_size += 1 + 4;
  }

  if (has_tz()) {
    // required float tz = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

    // required float focal_length = 2;
    total_size += 1 + 4;

    // required float principal_point_x = 3;
    total_size += 1 + 4;

    // required float principal_point_y = 4;
    total_size += 1 + 4;

    // required float distortion = 5;
    total_size += 1 + 4;

    // required float q0 = 6;
    total_size += 1 + 4;

    // required float q1 = 7;
    total_size += 1 + 4;

    // required float q2 = 8;
    total_size += 1 + 4;

    // required float q3 = 9;
    total_size += 1 + 4;

    // required float tx = 10;
    total_size += 1 + 4;

    // required float ty = 11;
    total_size += 1 + 4;

    // required float tz = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 61440u) {
    // optional float derived_camera_world_tx = 13;
    if (has_derived_camera_world_tx()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (has_derived_camera_world_ty()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (has_derived_camera_world_tz()) {
      total_size += 1 + 4;
    }

    // optional uint32 pixel_image_width = 16;
    if (has_pixel_image_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixel_image_width());
    }

  }
  // optional uint32 pixel_image_height = 17;
  if (has_pixel_image_height()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pixel_image_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryCameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryCameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryCameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryCameraCalibration)
    MergeFrom(*source);
  }
}

void SSL_GeometryCameraCalibration::MergeFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      focal_length_ = from.focal_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      principal_point_x_ = from.principal_point_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      principal_point_y_ = from.principal_point_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      distortion_ = from.distortion_;
    }
    if (cached_has_bits & 0x00000020u) {
      q0_ = from.q0_;
    }
    if (cached_has_bits & 0x00000040u) {
      q1_ = from.q1_;
    }
    if (cached_has_bits & 0x00000080u) {
      q2_ = from.q2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      q3_ = from.q3_;
    }
    if (cached_has_bits & 0x00000200u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000400u) {
      ty_ = from.ty_;
    }
    if (cached_has_bits & 0x00000800u) {
      tz_ = from.tz_;
    }
    if (cached_has_bits & 0x00001000u) {
      derived_camera_world_tx_ = from.derived_camera_world_tx_;
    }
    if (cached_has_bits & 0x00002000u) {
      derived_camera_world_ty_ = from.derived_camera_world_ty_;
    }
    if (cached_has_bits & 0x00004000u) {
      derived_camera_world_tz_ = from.derived_camera_world_tz_;
    }
    if (cached_has_bits & 0x00008000u) {
      pixel_image_width_ = from.pixel_image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_pixel_image_height(from.pixel_image_height());
  }
}

void SSL_GeometryCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void SSL_GeometryCameraCalibration::Swap(SSL_GeometryCameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  using std::swap;
  swap(camera_id_, other->camera_id_);
  swap(focal_length_, other->focal_length_);
  swap(principal_point_x_, other->principal_point_x_);
  swap(principal_point_y_, other->principal_point_y_);
  swap(distortion_, other->distortion_);
  swap(q0_, other->q0_);
  swap(q1_, other->q1_);
  swap(q2_, other->q2_);
  swap(q3_, other->q3_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(tz_, other->tz_);
  swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
  swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
  swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
  swap(pixel_image_width_, other->pixel_image_width_);
  swap(pixel_image_height_, other->pixel_image_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_BallModelStraightTwoPhase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_BallModelStraightTwoPhase::kAccSlideFieldNumber;
const int SSL_BallModelStraightTwoPhase::kAccRollFieldNumber;
const int SSL_BallModelStraightTwoPhase::kKSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelStraightTwoPhase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_BallModelStraightTwoPhase)
}
SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(const SSL_BallModelStraightTwoPhase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_slide_, &from.acc_slide_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_switch_) -
    reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
  // @@protoc_insertion_point(copy_constructor:SSL_BallModelStraightTwoPhase)
}

void SSL_BallModelStraightTwoPhase::SharedCtor() {
  ::memset(&acc_slide_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_switch_) -
      reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
}

SSL_BallModelStraightTwoPhase::~SSL_BallModelStraightTwoPhase() {
  // @@protoc_insertion_point(destructor:SSL_BallModelStraightTwoPhase)
  SharedDtor();
}

void SSL_BallModelStraightTwoPhase::SharedDtor() {
}

void SSL_BallModelStraightTwoPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_BallModelStraightTwoPhase::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_BallModelStraightTwoPhase& SSL_BallModelStraightTwoPhase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelStraightTwoPhase.base);
  return *internal_default_instance();
}


void SSL_BallModelStraightTwoPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&acc_slide_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&k_switch_) -
        reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_BallModelStraightTwoPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_BallModelStraightTwoPhase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double acc_slide = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_acc_slide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_slide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double acc_roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_acc_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double k_switch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_k_switch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_BallModelStraightTwoPhase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_BallModelStraightTwoPhase)
  return false;
#undef DO_
}

void SSL_BallModelStraightTwoPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_slide = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_slide(), output);
  }

  // required double acc_roll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_roll(), output);
  }

  // required double k_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k_switch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_BallModelStraightTwoPhase)
}

::google::protobuf::uint8* SSL_BallModelStraightTwoPhase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_slide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_slide(), target);
  }

  // required double acc_roll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_roll(), target);
  }

  // required double k_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k_switch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelStraightTwoPhase)
  return target;
}

size_t SSL_BallModelStraightTwoPhase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (has_acc_slide()) {
    // required double acc_slide = 1;
    total_size += 1 + 8;
  }

  if (has_acc_roll()) {
    // required double acc_roll = 2;
    total_size += 1 + 8;
  }

  if (has_k_switch()) {
    // required double k_switch = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_BallModelStraightTwoPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double acc_slide = 1;
    total_size += 1 + 8;

    // required double acc_roll = 2;
    total_size += 1 + 8;

    // required double k_switch = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_BallModelStraightTwoPhase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_BallModelStraightTwoPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_BallModelStraightTwoPhase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_BallModelStraightTwoPhase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_BallModelStraightTwoPhase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_BallModelStraightTwoPhase)
    MergeFrom(*source);
  }
}

void SSL_BallModelStraightTwoPhase::MergeFrom(const SSL_BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelStraightTwoPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      acc_slide_ = from.acc_slide_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_roll_ = from.acc_roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      k_switch_ = from.k_switch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_BallModelStraightTwoPhase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_BallModelStraightTwoPhase::CopyFrom(const SSL_BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_BallModelStraightTwoPhase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SSL_BallModelStraightTwoPhase::Swap(SSL_BallModelStraightTwoPhase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_BallModelStraightTwoPhase::InternalSwap(SSL_BallModelStraightTwoPhase* other) {
  using std::swap;
  swap(acc_slide_, other->acc_slide_);
  swap(acc_roll_, other->acc_roll_);
  swap(k_switch_, other->k_switch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_BallModelStraightTwoPhase::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_BallModelChipFixedLoss::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_BallModelChipFixedLoss::kDampingXyFirstHopFieldNumber;
const int SSL_BallModelChipFixedLoss::kDampingXyOtherHopsFieldNumber;
const int SSL_BallModelChipFixedLoss::kDampingZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelChipFixedLoss.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_BallModelChipFixedLoss)
}
SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(const SSL_BallModelChipFixedLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&damping_xy_first_hop_, &from.damping_xy_first_hop_,
    static_cast<size_t>(reinterpret_cast<char*>(&damping_z_) -
    reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
  // @@protoc_insertion_point(copy_constructor:SSL_BallModelChipFixedLoss)
}

void SSL_BallModelChipFixedLoss::SharedCtor() {
  ::memset(&damping_xy_first_hop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damping_z_) -
      reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
}

SSL_BallModelChipFixedLoss::~SSL_BallModelChipFixedLoss() {
  // @@protoc_insertion_point(destructor:SSL_BallModelChipFixedLoss)
  SharedDtor();
}

void SSL_BallModelChipFixedLoss::SharedDtor() {
}

void SSL_BallModelChipFixedLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_BallModelChipFixedLoss::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_BallModelChipFixedLoss& SSL_BallModelChipFixedLoss::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_BallModelChipFixedLoss.base);
  return *internal_default_instance();
}


void SSL_BallModelChipFixedLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&damping_xy_first_hop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damping_z_) -
        reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_BallModelChipFixedLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_BallModelChipFixedLoss)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double damping_xy_first_hop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_damping_xy_first_hop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_xy_first_hop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double damping_xy_other_hops = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_damping_xy_other_hops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_xy_other_hops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double damping_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_damping_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_BallModelChipFixedLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_BallModelChipFixedLoss)
  return false;
#undef DO_
}

void SSL_BallModelChipFixedLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double damping_xy_first_hop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->damping_xy_first_hop(), output);
  }

  // required double damping_xy_other_hops = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->damping_xy_other_hops(), output);
  }

  // required double damping_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->damping_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_BallModelChipFixedLoss)
}

::google::protobuf::uint8* SSL_BallModelChipFixedLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double damping_xy_first_hop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->damping_xy_first_hop(), target);
  }

  // required double damping_xy_other_hops = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->damping_xy_other_hops(), target);
  }

  // required double damping_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->damping_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelChipFixedLoss)
  return target;
}

size_t SSL_BallModelChipFixedLoss::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_BallModelChipFixedLoss)
  size_t total_size = 0;

  if (has_damping_xy_first_hop()) {
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;
  }

  if (has_damping_xy_other_hops()) {
    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;
  }

  if (has_damping_z()) {
    // required double damping_z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_BallModelChipFixedLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_BallModelChipFixedLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;

    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;

    // required double damping_z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_BallModelChipFixedLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_BallModelChipFixedLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_BallModelChipFixedLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_BallModelChipFixedLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_BallModelChipFixedLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_BallModelChipFixedLoss)
    MergeFrom(*source);
  }
}

void SSL_BallModelChipFixedLoss::MergeFrom(const SSL_BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelChipFixedLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      damping_xy_first_hop_ = from.damping_xy_first_hop_;
    }
    if (cached_has_bits & 0x00000002u) {
      damping_xy_other_hops_ = from.damping_xy_other_hops_;
    }
    if (cached_has_bits & 0x00000004u) {
      damping_z_ = from.damping_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_BallModelChipFixedLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_BallModelChipFixedLoss::CopyFrom(const SSL_BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_BallModelChipFixedLoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SSL_BallModelChipFixedLoss::Swap(SSL_BallModelChipFixedLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_BallModelChipFixedLoss::InternalSwap(SSL_BallModelChipFixedLoss* other) {
  using std::swap;
  swap(damping_xy_first_hop_, other->damping_xy_first_hop_);
  swap(damping_xy_other_hops_, other->damping_xy_other_hops_);
  swap(damping_z_, other->damping_z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_BallModelChipFixedLoss::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryModels::InitAsDefaultInstance() {
  ::_SSL_GeometryModels_default_instance_._instance.get_mutable()->straight_two_phase_ = const_cast< ::SSL_BallModelStraightTwoPhase*>(
      ::SSL_BallModelStraightTwoPhase::internal_default_instance());
  ::_SSL_GeometryModels_default_instance_._instance.get_mutable()->chip_fixed_loss_ = const_cast< ::SSL_BallModelChipFixedLoss*>(
      ::SSL_BallModelChipFixedLoss::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryModels::kStraightTwoPhaseFieldNumber;
const int SSL_GeometryModels::kChipFixedLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryModels::SSL_GeometryModels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryModels.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryModels)
}
SSL_GeometryModels::SSL_GeometryModels(const SSL_GeometryModels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_straight_two_phase()) {
    straight_two_phase_ = new ::SSL_BallModelStraightTwoPhase(*from.straight_two_phase_);
  } else {
    straight_two_phase_ = NULL;
  }
  if (from.has_chip_fixed_loss()) {
    chip_fixed_loss_ = new ::SSL_BallModelChipFixedLoss(*from.chip_fixed_loss_);
  } else {
    chip_fixed_loss_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryModels)
}

void SSL_GeometryModels::SharedCtor() {
  ::memset(&straight_two_phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_fixed_loss_) -
      reinterpret_cast<char*>(&straight_two_phase_)) + sizeof(chip_fixed_loss_));
}

SSL_GeometryModels::~SSL_GeometryModels() {
  // @@protoc_insertion_point(destructor:SSL_GeometryModels)
  SharedDtor();
}

void SSL_GeometryModels::SharedDtor() {
  if (this != internal_default_instance()) delete straight_two_phase_;
  if (this != internal_default_instance()) delete chip_fixed_loss_;
}

void SSL_GeometryModels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_GeometryModels::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryModels& SSL_GeometryModels::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryModels.base);
  return *internal_default_instance();
}


void SSL_GeometryModels::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(straight_two_phase_ != NULL);
      straight_two_phase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chip_fixed_loss_ != NULL);
      chip_fixed_loss_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryModels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryModels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_straight_two_phase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chip_fixed_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryModels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryModels)
  return false;
#undef DO_
}

void SSL_GeometryModels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_straight_two_phase(), output);
  }

  // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_chip_fixed_loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryModels)
}

::google::protobuf::uint8* SSL_GeometryModels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_straight_two_phase(), deterministic, target);
  }

  // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_chip_fixed_loss(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryModels)
  return target;
}

size_t SSL_GeometryModels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryModels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
    if (has_straight_two_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *straight_two_phase_);
    }

    // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
    if (has_chip_fixed_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chip_fixed_loss_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryModels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryModels)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryModels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryModels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryModels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryModels)
    MergeFrom(*source);
  }
}

void SSL_GeometryModels::MergeFrom(const SSL_GeometryModels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryModels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_straight_two_phase()->::SSL_BallModelStraightTwoPhase::MergeFrom(from.straight_two_phase());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chip_fixed_loss()->::SSL_BallModelChipFixedLoss::MergeFrom(from.chip_fixed_loss());
    }
  }
}

void SSL_GeometryModels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryModels::CopyFrom(const SSL_GeometryModels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryModels::IsInitialized() const {
  if (has_straight_two_phase()) {
    if (!this->straight_two_phase_->IsInitialized()) return false;
  }
  if (has_chip_fixed_loss()) {
    if (!this->chip_fixed_loss_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryModels::Swap(SSL_GeometryModels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryModels::InternalSwap(SSL_GeometryModels* other) {
  using std::swap;
  swap(straight_two_phase_, other->straight_two_phase_);
  swap(chip_fixed_loss_, other->chip_fixed_loss_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_GeometryModels::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryData::InitAsDefaultInstance() {
  ::_SSL_GeometryData_default_instance_._instance.get_mutable()->field_ = const_cast< ::SSL_GeometryFieldSize*>(
      ::SSL_GeometryFieldSize::internal_default_instance());
  ::_SSL_GeometryData_default_instance_._instance.get_mutable()->models_ = const_cast< ::SSL_GeometryModels*>(
      ::SSL_GeometryModels::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
const int SSL_GeometryData::kModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  if (from.has_models()) {
    models_ = new ::SSL_GeometryModels(*from.models_);
  } else {
    models_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&models_) -
      reinterpret_cast<char*>(&field_)) + sizeof(models_));
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete models_;
}

void SSL_GeometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::scc_info_SSL_GeometryData.base);
  return *internal_default_instance();
}


void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calib_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(field_ != NULL);
      field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(models_ != NULL);
      models_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSL_GeometryFieldSize field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_GeometryModels models = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_models()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryData)
  return false;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_field(), output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->calib(static_cast<int>(i)),
      output);
  }

  // optional .SSL_GeometryModels models = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_models(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_field(), deterministic, target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->calib(static_cast<int>(i)), deterministic, target);
  }

  // optional .SSL_GeometryModels models = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_models(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->calib_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calib(static_cast<int>(i)));
    }
  }

  // optional .SSL_GeometryModels models = 3;
  if (has_models()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *models_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_field()->::SSL_GeometryFieldSize::MergeFrom(from.field());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_models()->::SSL_GeometryModels::MergeFrom(from.models());
    }
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  if (has_models()) {
    if (!this->models_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  CastToBase(&calib_)->InternalSwap(CastToBase(&other->calib_));
  swap(field_, other->field_);
  swap(models_, other->models_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Vector2f* Arena::CreateMaybeMessage< ::Vector2f >(Arena* arena) {
  return Arena::CreateInternal< ::Vector2f >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_FieldLineSegment* Arena::CreateMaybeMessage< ::SSL_FieldLineSegment >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_FieldLineSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_FieldCircularArc* Arena::CreateMaybeMessage< ::SSL_FieldCircularArc >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_FieldCircularArc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_GeometryFieldSize* Arena::CreateMaybeMessage< ::SSL_GeometryFieldSize >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_GeometryFieldSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_GeometryCameraCalibration* Arena::CreateMaybeMessage< ::SSL_GeometryCameraCalibration >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_GeometryCameraCalibration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_BallModelStraightTwoPhase* Arena::CreateMaybeMessage< ::SSL_BallModelStraightTwoPhase >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_BallModelStraightTwoPhase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_BallModelChipFixedLoss* Arena::CreateMaybeMessage< ::SSL_BallModelChipFixedLoss >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_BallModelChipFixedLoss >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_GeometryModels* Arena::CreateMaybeMessage< ::SSL_GeometryModels >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_GeometryModels >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_GeometryData* Arena::CreateMaybeMessage< ::SSL_GeometryData >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_GeometryData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
