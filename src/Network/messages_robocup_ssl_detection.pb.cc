// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection.proto

#include "messages_robocup_ssl_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_DetectionBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobocup_5fssl_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_DetectionRobot;
}  // namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto
class SSL_DetectionBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionBall>
      _instance;
} _SSL_DetectionBall_default_instance_;
class SSL_DetectionRobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionRobot>
      _instance;
} _SSL_DetectionRobot_default_instance_;
class SSL_DetectionFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_DetectionFrame>
      _instance;
} _SSL_DetectionFrame_default_instance_;
namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto {
static void InitDefaultsSSL_DetectionBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionBall_default_instance_;
    new (ptr) ::SSL_DetectionBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_DetectionBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_DetectionBall}, {}};

static void InitDefaultsSSL_DetectionRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionRobot_default_instance_;
    new (ptr) ::SSL_DetectionRobot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionRobot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_DetectionRobot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_DetectionRobot}, {}};

static void InitDefaultsSSL_DetectionFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionFrame_default_instance_;
    new (ptr) ::SSL_DetectionFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_DetectionFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_DetectionFrame}, {
      &protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionBall.base,
      &protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionRobot.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_DetectionBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_DetectionRobot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_DetectionFrame.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, pixel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionBall, pixel_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, robot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, pixel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, pixel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionRobot, height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, frame_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, t_capture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, t_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, balls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, robots_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_DetectionFrame, robots_blue_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::SSL_DetectionBall)},
  { 19, 32, sizeof(::SSL_DetectionRobot)},
  { 40, 52, sizeof(::SSL_DetectionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_DetectionBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_DetectionRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_DetectionFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages_robocup_ssl_detection.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$messages_robocup_ssl_detection.proto\"x"
      "\n\021SSL_DetectionBall\022\022\n\nconfidence\030\001 \002(\002\022"
      "\014\n\004area\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z"
      "\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002(\002\022\017\n\007pixel_y\030\007 \002(\002"
      "\"\227\001\n\022SSL_DetectionRobot\022\022\n\nconfidence\030\001 "
      "\002(\002\022\020\n\010robot_id\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 "
      "\002(\002\022\023\n\013orientation\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002("
      "\002\022\017\n\007pixel_y\030\007 \002(\002\022\016\n\006height\030\010 \001(\002\"\331\001\n\022S"
      "SL_DetectionFrame\022\024\n\014frame_number\030\001 \002(\r\022"
      "\021\n\tt_capture\030\002 \002(\001\022\016\n\006t_sent\030\003 \002(\001\022\021\n\tca"
      "mera_id\030\004 \002(\r\022!\n\005balls\030\005 \003(\0132\022.SSL_Detec"
      "tionBall\022*\n\rrobots_yellow\030\006 \003(\0132\023.SSL_De"
      "tectionRobot\022(\n\013robots_blue\030\007 \003(\0132\023.SSL_"
      "DetectionRobot"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_detection.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_5frobocup_5fssl_5fdetection_2eproto

// ===================================================================

void SSL_DetectionBall::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionBall::kConfidenceFieldNumber;
const int SSL_DetectionBall::kAreaFieldNumber;
const int SSL_DetectionBall::kXFieldNumber;
const int SSL_DetectionBall::kYFieldNumber;
const int SSL_DetectionBall::kZFieldNumber;
const int SSL_DetectionBall::kPixelXFieldNumber;
const int SSL_DetectionBall::kPixelYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionBall::SSL_DetectionBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionBall)
}
SSL_DetectionBall::SSL_DetectionBall(const SSL_DetectionBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_y_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionBall)
}

void SSL_DetectionBall::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_y_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
}

SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  SharedDtor();
}

void SSL_DetectionBall::SharedDtor() {
}

void SSL_DetectionBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_DetectionBall::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionBall& SSL_DetectionBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionBall.base);
  return *internal_default_instance();
}


void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_y_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_DetectionBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pixel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_pixel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pixel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_pixel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionBall)
  return false;
#undef DO_
}

void SSL_DetectionBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionBall)
}

::google::protobuf::uint8* SSL_DetectionBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

size_t SSL_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 area = 2;
  if (has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->area());
  }

  // optional float z = 5;
  if (has_z()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionBall)
    MergeFrom(*source);
  }
}

void SSL_DetectionBall::MergeFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      pixel_x_ = from.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pixel_y_ = from.pixel_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006d) != 0x0000006d) return false;
  return true;
}

void SSL_DetectionBall::Swap(SSL_DetectionBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(area_, other->area_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(pixel_x_, other->pixel_x_);
  swap(pixel_y_, other->pixel_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_DetectionBall::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_DetectionRobot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionRobot::kConfidenceFieldNumber;
const int SSL_DetectionRobot::kRobotIdFieldNumber;
const int SSL_DetectionRobot::kXFieldNumber;
const int SSL_DetectionRobot::kYFieldNumber;
const int SSL_DetectionRobot::kOrientationFieldNumber;
const int SSL_DetectionRobot::kPixelXFieldNumber;
const int SSL_DetectionRobot::kPixelYFieldNumber;
const int SSL_DetectionRobot::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionRobot::SSL_DetectionRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionRobot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionRobot)
}
SSL_DetectionRobot::SSL_DetectionRobot(const SSL_DetectionRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionRobot)
}

void SSL_DetectionRobot::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
}

SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  SharedDtor();
}

void SSL_DetectionRobot::SharedDtor() {
}

void SSL_DetectionRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_DetectionRobot::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionRobot& SSL_DetectionRobot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionRobot.base);
  return *internal_default_instance();
}


void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_DetectionRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionRobot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 robot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_robot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float orientation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pixel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_pixel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pixel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_pixel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionRobot)
  return false;
#undef DO_
}

void SSL_DetectionRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionRobot)
}

::google::protobuf::uint8* SSL_DetectionRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

size_t SSL_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // optional float orientation = 5;
  if (has_orientation()) {
    total_size += 1 + 4;
  }

  // optional float height = 8;
  if (has_height()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionRobot)
    MergeFrom(*source);
  }
}

void SSL_DetectionRobot::MergeFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      pixel_x_ = from.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pixel_y_ = from.pixel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006d) != 0x0000006d) return false;
  return true;
}

void SSL_DetectionRobot::Swap(SSL_DetectionRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(robot_id_, other->robot_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(orientation_, other->orientation_);
  swap(pixel_x_, other->pixel_x_);
  swap(pixel_y_, other->pixel_y_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_DetectionRobot::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_DetectionFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionFrame::kFrameNumberFieldNumber;
const int SSL_DetectionFrame::kTCaptureFieldNumber;
const int SSL_DetectionFrame::kTSentFieldNumber;
const int SSL_DetectionFrame::kCameraIdFieldNumber;
const int SSL_DetectionFrame::kBallsFieldNumber;
const int SSL_DetectionFrame::kRobotsYellowFieldNumber;
const int SSL_DetectionFrame::kRobotsBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionFrame::SSL_DetectionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionFrame)
}
SSL_DetectionFrame::SSL_DetectionFrame(const SSL_DetectionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      balls_(from.balls_),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_capture_, &from.t_capture_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_sent_) -
    reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}

void SSL_DetectionFrame::SharedCtor() {
  ::memset(&t_capture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_sent_) -
      reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
}

SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  SharedDtor();
}

void SSL_DetectionFrame::SharedDtor() {
}

void SSL_DetectionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_DetectionFrame::descriptor() {
  ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_DetectionFrame& SSL_DetectionFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::scc_info_SSL_DetectionFrame.base);
  return *internal_default_instance();
}


void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&t_capture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_sent_) -
        reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_DetectionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frame_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double t_capture = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_t_capture();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_capture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double t_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_t_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 camera_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionBall balls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_balls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionRobot robots_yellow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_DetectionRobot robots_blue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionFrame)
  return false;
#undef DO_
}

void SSL_DetectionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // required double t_capture = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t_capture(), output);
  }

  // required double t_sent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t_sent(), output);
  }

  // required uint32 camera_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->camera_id(), output);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->balls(static_cast<int>(i)),
      output);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_yellow_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->robots_yellow(static_cast<int>(i)),
      output);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_blue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->robots_blue(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionFrame)
}

::google::protobuf::uint8* SSL_DetectionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_number(), target);
  }

  // required double t_capture = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t_capture(), target);
  }

  // required double t_sent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t_sent(), target);
  }

  // required uint32 camera_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->balls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_yellow_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->robots_yellow(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_blue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->robots_blue(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

size_t SSL_DetectionFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (has_t_capture()) {
    // required double t_capture = 2;
    total_size += 1 + 8;
  }

  if (has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());
  }

  if (has_camera_id()) {
    // required uint32 camera_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  if (has_t_sent()) {
    // required double t_sent = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double t_capture = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());

    // required uint32 camera_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

    // required double t_sent = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .SSL_DetectionBall balls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->balls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->balls(static_cast<int>(i)));
    }
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_yellow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots_yellow(static_cast<int>(i)));
    }
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_blue_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots_blue(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionFrame)
    MergeFrom(*source);
  }
}

void SSL_DetectionFrame::MergeFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      t_capture_ = from.t_capture_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      t_sent_ = from.t_sent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->balls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_blue())) return false;
  return true;
}

void SSL_DetectionFrame::Swap(SSL_DetectionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* other) {
  using std::swap;
  CastToBase(&balls_)->InternalSwap(CastToBase(&other->balls_));
  CastToBase(&robots_yellow_)->InternalSwap(CastToBase(&other->robots_yellow_));
  CastToBase(&robots_blue_)->InternalSwap(CastToBase(&other->robots_blue_));
  swap(t_capture_, other->t_capture_);
  swap(frame_number_, other->frame_number_);
  swap(camera_id_, other->camera_id_);
  swap(t_sent_, other->t_sent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_DetectionFrame::GetMetadata() const {
  protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5frobocup_5fssl_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_DetectionBall* Arena::CreateMaybeMessage< ::SSL_DetectionBall >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_DetectionBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_DetectionRobot* Arena::CreateMaybeMessage< ::SSL_DetectionRobot >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_DetectionRobot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_DetectionFrame* Arena::CreateMaybeMessage< ::SSL_DetectionFrame >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_DetectionFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
